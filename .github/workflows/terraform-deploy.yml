name: 'Deploy'

on:
  workflow_call:
    inputs:
      runs-on: 
        type: string
        default: ubuntu-latest
      region:
        type: string
        default: "eu-west-3"
      cloud_provider:
        type: string
        default: "aws"
      tf_version:
        type: string
        required: true
      working_directory:
        type: string
        required: true
      # approvers: 
      #   type: string
      #   required: true
      # minimum-approvals: 
      #   type: string
      #   default: 2
      # issue-title: 
      #   type: string
      #   default: "Deploying"
      # issue-body: 
      #   type: string
      #   default: "Please approve or deny the deployment."
    secrets:
       TFAUTOMATION_AWS_ACCESS_KEY:
         required: true
       TFAUTOMATION_AWS_SECRET_ACCESS_KEY:
         required: true
        
jobs:
  # build:
  #   runs-on: ${{ inputs.runs-on }}
  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working_directory }}
  #   outputs:
  #     exitcode: ${{ steps.plan.outputs.TF_EXIT_CODE }}
  #   steps:
    
  #   # Checkout the repo
  #   - uses: actions/checkout@v3

  #   # Configure AWS credentials
      
  #   - name: Configure AWS Credentials Action For GitHub Actions
  #     uses: aws-actions/configure-aws-credentials@v1-node16
  #     with:
  #       aws-access-key-id: ${{ secrets.TFAUTOMATION_AWS_ACCESS_KEY }}
  #       aws-secret-access-key: ${{ secrets.TFAUTOMATION_AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ inputs.region }}

      
  #   - name: 'Az CLI login'
  #     if: inputs.cloud_provider == 'azure'
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ secrets.TFAUTOMATION_AZURE_CLIENT_ID}}
  #       tenant-id: ${{ secrets.TFAUTOMATION_AZURE_TENANT_ID}}
  #       subscription-id: ${{ secrets.TFAUTOMATION_AZURE_SUBSCRIPTION_ID }}

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2
  #     with:
  #       terraform_version: ${{ inputs.tf_version }}

  #   - name: Terraform fmt
  #     id: fmt
  #     run: terraform fmt

  #   - name: Terraform Init
  #     id: init
  #     run: terraform init

  #   - name: Terraform Validate
  #     id: validate
  #     run: terraform validate

  #   - name: Terraform Plan
  #     id: plan
  #     run: |
  #         terraform plan
  #         TF_EXIT_CODE=$(terraform plan -out=tfplan -detailed-exitcode | grep -oP '(?<=::debug::exitcode: )\d+' || echo 0)
  #         echo "TF_EXIT_CODE=$TF_EXIT_CODE" >> $GITHUB_OUTPUT
        
  deploy:
   # if: ${{ needs.build.outputs.exitcode == 2}} 
    runs-on: ${{ inputs.runs-on }}
   # needs: build
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        
    steps:
    # - name: Generate token
    #   id: generate_token
    #   uses: tibdex/github-app-token@v1
    #   with:
    #     app_id: ${{ secrets.APPROVAL_APP_ID }}
    #     private_key: ${{ secrets.APPROVAL_APP_PRIVATE_KEY }}
        
    # - uses: trstringer/manual-approval@v1
    #   timeout-minutes: 58
    #   with:
    #     #secret: ${{ github.TOKEN  }}
    #     secret: ${{ steps.generate_token.outputs.token }}
    #     approvers: ${{ inputs.approvers }}
    #     minimum-approvals: ${{ inputs.minimum-approvals }}
    #     issue-title: ${{ inputs.issue-title }}
    #     issue-body: ${{ inputs.issue-body }}
    #     exclude-workflow-initiator-as-approver: false
    #     additional-approved-words: 'GO'
    #     additional-denied-words: 'STOP'
      
    - uses: actions/checkout@v3

     # Configure AWS credentials
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id:  ${{ secrets.TFAUTOMATION_AWS_ACCESS_KEY }}
        aws-secret-access-key:  ${{ secrets.TFAUTOMATION_AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{ inputs.region }}

      
    - name: 'Az CLI login'
      if: inputs.cloud_provider == 'azure'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.TFAUTOMATION_AZURE_CLIENT_ID}}
        tenant-id: ${{ secrets.TFAUTOMATION_AZURE_TENANT_ID}}
        subscription-id: ${{ secrets.TFAUTOMATION_AZURE_SUBSCRIPTION_ID }}

    - name: 'Authenticate to Google Cloud'
      if: inputs.cloud_provider == 'gcp'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        workload_identity_provider: 'projects/472159367072/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-oidc'
        service_account: 'github-actions@scalefree-edw-test.iam.gserviceaccount.com'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}
      
    - name: Terraform Init
      run: terraform init
        
    - name: Terraform Apply
      run: terraform apply -auto-approve
